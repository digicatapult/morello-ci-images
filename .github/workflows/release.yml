name: Release

on:
  push:
    branches: ['main']

jobs:
  preconditions:
    runs-on: ubuntu-latest
    outputs:
      repo_name: ${{ steps.repo_ids.outputs.REPO_NAME }}
      org_name: ${{ steps.repo_ids.outputs.ORG_NAME }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
          submodules: recursive
      - name: Check token
        run: |
          if [ -z "${{ secrets.GITHUB_TOKEN }}"]; then
            echo "Must provide a GITHUB_TOKEN secret in order to run release workflow"
            exit 1
          fi
      - name: Get repository identifiers
        id: repo_ids
        run: |
          REPO_NAME=$(echo "${{ github.event.repository.name }}" | tr '[:upper:]' '[:lower:]')
          ORG_NAME=$(echo "${{ github.event.repository.owner.name }}" | tr '[:upper:]' '[:lower:]')
          echo "::set-output name=REPO_NAME::$REPO_NAME"
          echo "::set-output name=ORG_NAME::$ORG_NAME"


  publish:
    name: 'Publish package'
    needs:
      - preconditions
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
          submodules: recursive
      
      # Docker build
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v1
        with:
          platforms: all
      - name: Setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          buildkitd-flags: '--debug'
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: $GITHUB_ACTOR
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Login to Dockerhub Registry
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DSBD_DOCKERHUB_USERNAME }}
          password: ${{ secrets.DSBD_DOCKERHUB_TOKEN }}
      - name: Publish multi-arch image
        uses: docker/build-push-action@v2
        with:
          push: true
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: ./Dockerfile
          platforms: linux/amd64, linux/arm64
          tags: |
            ghcr.io/${{ needs.preconditions.outputs.org_name }}/sdk-morello-purecap:${{ needs.check-version.outputs.version }}
            ${{ needs.preconditions.outputs.org_name }}/sdk-morello-purecap:${{ needs.check-version.outputs.version }}
            ghcr.io/${{ needs.preconditions.outputs.org_name }}/sdk-morello-purecap:latest
            ${{ needs.preconditions.outputs.org_name }}/sdk-morello-purecap:latest
          labels: |
            org.opencontainers.image.title=sdk-morello-purecap
            org.opencontainers.image.description=${{ github.event.repository.description }}
            org.opencontainers.image.source=${{ github.event.repository.html_url }}
            org.opencontainers.image.url=${{ github.event.repository.html_url }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.version=${{ needs.check-version.outputs.version }}
            org.opencontainers.image.created=${{ needs.check-version.outputs.build_date }}
      # Build github release
      - name: Build release version
        uses: softprops/action-gh-release@v1
        with:
          token: '${{ secrets.GITHUB_TOKEN }}'
          tag_name: ${{ needs.check-version.outputs.version }}
          prerelease: false
          name: ${{ needs.check-version.outputs.version }}
          generate_release_notes: true
      - name: Delete release latest
        uses: actions/github-script@v5
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const { owner, repo } = context.repo
            try {
              await github.rest.git.deleteRef({ owner, repo, ref: 'tags/latest' })
            }
            catch (err) {
              if (err.status !== 422) throw err
            }
      - name: Build release latest
        uses: softprops/action-gh-release@v1
        with:
          token: '${{ secrets.GITHUB_TOKEN }}'
          tag_name: latest
          prerelease: false
          name: Latest ${{ needs.check-version.outputs.version }}
          generate_release_notes: true
